lines(rep(pca_recon, 2), c(-100,100), col = "red", lwd = 2, lty = 2)
hist(res_mat[2,], breaks = 50, xlim = range(c(res_mat[2,], pca_var)), col = "gray")
lines(rep(pca_var, 2), c(-100,100), col = "red", lwd = 2, lty = 2)
library("neuroblastoma")
data(neuroblastoma)
head(neuroblastoma$profiles)
dim(neuroblastoma$profiles)
head(neuroblastoma$annotations)
table(neuroblastoma$annotations$chromosome)
table(neuroblastoma$annotations$annotation)
# seems like I could've started here... lol
library(airway)
data(gse)
# assayNames(gse)
# head(assay(gse), 3)
# colSums(assay(gse))
# rowRanges(gse)
# seqinfo(rowRanges(gse))
# colData(gse)
#
# gse$donor
# gse$condition
gse$cell <- gse$donor
gse$dex <- gse$condition
# levels(gse$dex)
levels(gse$dex) <- c("untrt", "trt")
library(magrittr)
gse$dex %<>% relevel("untrt")
# gse$dex
# round( colSums(assay(gse)) / 1e6, 1 )
library(DESeq2)
dds <- DESeqDataSet(gse, design = ~ cell + dex)
countdata <- round(assays(gse)[["counts"]])
# head(countdata, 3)
coldata <- colData(gse)
ddsMat <- DESeqDataSetFromMatrix(countData = countdata,
colData = coldata,
design = ~ cell + dex)
nrow(dds)
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
nrow(dds)
keep <- rowSums(counts(dds) >= 10) >= 3
vsd <- vst(dds, blind = FALSE)
set.seed(10)
dat <- assay(vsd)
dat <- dat[which(apply(dat, 1, sd) != 0),]
dim(dat)
idx <- sample(1:nrow(dat), 300)
dat_simp <- dat[idx,]
gplots::heatmap.2(t(dat_simp))
gplots::heatmap.2(dat_simp)
?heatmap.2
gplots::heatmap.2(dat_simp, trace = "none")
gplots::heatmap.2(t(dat_simp), trace = "none")
gplots::heatmap.2(t(dat_simp), trace = "none")
gplots::heatmap.2(t(dat_simp), trace = "none")
rm(list=ls())
# make the data
library(airway)
data(gse)
gse$cell <- gse$donor
gse$dex <- gse$condition
# levels(gse$dex)
levels(gse$dex) <- c("untrt", "trt")
gse$dex <- relevel(gse$dex, "untrt")
library(DESeq2)
dds <- DESeqDataSet(gse, design = ~ cell + dex)
rm(list=ls())
# make the data
library(airway)
gse <- airway::gse
gse$cell <- gse$donor
gse$dex <- gse$condition
# levels(gse$dex)
levels(gse$dex) <- c("untrt", "trt")
gse$dex <- relevel(gse$dex, "untrt")
library(DESeq2)
dds <- DESeq2::DESeqDataSet(gse, design = ~ cell + dex)
rm(list=ls())
# make the data
gse <- airway::gse
# make the data
data(gse)
gse$cell <- gse$donor
gse$dex <- gse$condition
# levels(gse$dex)
levels(gse$dex) <- c("untrt", "trt")
gse$dex <- relevel(gse$dex, "untrt")
library(DESeq2)
dds <- DESeq2::DESeqDataSet(gse, design = ~ cell + dex)
class(dds)
names(dds)
getSlots(dds)
getSlots("DESeqDataSet")
dds <- DESeq2::DESeqDataSet(gse, design = ~ cell + dex)
keep <- rowSums(counts(dds) >= 10) >= 3
dds <- dds[keep,]
dim(dds)
vsd <- DESeq2::vst(dds, blind = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
?assays
vsn::meanSdPlot(SummarizedExperiment::assay(vsd))
install.packages("hexbin")
vsn::meanSdPlot(SummarizedExperiment::assay(vsd)) #requires hexbin
vsn::meanSdPlot(SummarizedExperiment::assay(dds)) #requires hexbin
count_mat <- SummarizedExperiment::assay(dds)
image(count_mat)
quantile(as.numeric(count_mat))
?vsn::meanSdPlot
count_dds <- SummarizedExperiment::assay(dds)
quantile(count_dds)
count_vsn <- SummarizedExperiment::assay(vsn)
quantile(count_vsn)
count_vsn <- SummarizedExperiment::assay(vsd)
quantile(count_vsd)
count_vsd <- SummarizedExperiment::assay(vsd)
quantile(count_vsd)
getSlots("DESeqDataSet")
dds$donor
dds$condition
colData(dds)
getSlots("DESeqDataSet")
dds@colData
?t.test
# figure out which genes
# too few samples to do an ancestry analysis, so we'll jump right into gene selection
idx <- which(dds$dex == "trt")
idx
x = count_vsd[1,]
res <- stats::t.test(x[idx], x[-idx])
names(res)
res$p.value
# figure out which genes
# too few samples to do an ancestry analysis, so we'll jump right into gene selection
idx <- which(dds$dex == "trt")
p_vec <- apply(count_vsd, 1, function(x){
stats::t.test(x[idx], x[-idx])$p.value
})
p_vec
plot(sort(p_vec))
idx <- which(p_vec <= 0.05)
length(idx)
idx <- which(p_vec <= 0.01)
length(idx)
idx <- which(p_vec <= 0.001)
length(idx)
idx <- which(p_vec <= 0.001)
length(idx)
dat <- count_vsd[idx,]
gplots::heatmap.2(dat, trace = "none")
gplots::heatmap.2(t(dat), trace = "none")
idx <- which(p_vec <= 0.0001)
length(idx)
dat <- count_vsd[idx,]
gplots::heatmap.2(t(dat), trace = "none") # why does this look like garbage?
image(dat)
res <- DESeq2::results(dds, name="dex_trt_vs_untrt")
dds <- DESeq2::DESeq(dds)
res <- DESeq2::results(dds)
DESeq2::plotMA(res, ylim = c(-5, 5))
install.packages("glmnet")
as.numeric(dds$dex)
# let's try logistic regression instead...
res <- glmnet::glmnet(t(count_vsd), as.numeric(dds$dex), family = "binomial")
plot(res)
res$lambda
coef_vec <- coef(res, s = 0.01)
length(coef_vec)
length(which(coef_vec != 0))
coef_vec
coef_vec <- as.numeric(coef(res, s = 0.01))
length(which(coef_vec != 0))
coef_vec <- as.numeric(coef(res, s = 0.1))
length(which(coef_vec != 0))
coef_vec <- as.numeric(coef(res, s = 0.001))
length(which(coef_vec != 0))
res$lambda
?stats::t.test
# figure out which genes
# too few samples to do an ancestry analysis, so we'll jump right into gene selection
idx <- which(dds$dex == "trt")
p_vec <- apply(count_vsd, 1, function(x){
stats::t.test(x[idx], x[-idx], alternative = "less")$p.value
})
plot(sort(p_vec))
idx <- which(p_vec <= 0.0001)
length(idx)
dat <- count_vsd[idx,]
gplots::heatmap.2(t(dat), trace = "none") # why does this look like garbage?
BiocManager::install("genefilter")
topVarGenes <- head(order(genefilter::rowVars(count_vsd), decreasing = TRUE), 20)
dat <- count_vsd[topVarGenes,]
gplots::heatmap.2(t(dat), trace = "none") # why does this look like garbage?
topVarGenes <- head(order(genefilter::rowVars(count_vsd), decreasing = TRUE), 100)
dat <- count_vsd[topVarGenes,]
gplots::heatmap.2(t(dat), trace = "none") # why does this look like garbage?
topVarGenes <- head(order(genefilter::rowVars(count_vsd), decreasing = TRUE), 50)
dat <- count_vsd[topVarGenes,]
gplots::heatmap.2(t(dat), trace = "none") # why does this look like garbage?
gplots::heatmap.2(dat, trace = "none") # why does this look like garbage?
gplots::heatmap.2(dat, trace = "none", asp = nrow(dat)/ncol(dat)) # why does this look like garbage?
gplots::heatmap.2(dat, trace = "none", asp = ncol(dat)/nrow(dat)) # why does this look like garbage?
gplots::heatmap.2(dat, trace = "none") # why does this look like garbage?
install.packages("pheatmap")
dat <- dat - rowMeans(dat)
gplots::heatmap.2(dat, trace = "none") # why does this look like garbage?
# let's use pheatmap
anno <- as.data.frame(DESeq2::colData(vsd)[, c("cell","dex")])
?colData
# let's use pheatmap
anno <- as.data.frame(SummarizedExperiment::colData(vsd)[, c("cell","dex")])
pheatmap::pheatmap(dat, annotation_col = anno)
topVarGenes <- head(order(genefilter::rowVars(count_vsd), decreasing = TRUE), 40)
dat <- count_vsd[topVarGenes,]
dat <- dat - rowMeans(dat)
gplots::heatmap.2(dat, trace = "none") # why does this look like garbage?
# let's use pheatmap
anno <- as.data.frame(SummarizedExperiment::colData(vsd)[, c("cell","dex")])
pheatmap::pheatmap(dat, annotation_col = anno)
anno
?genefilter::rowVars
genefilter::rowVars
DESeq2::plotMA
DESeq2:::plotMA.DESeqDataSet()
DESeq2:::plotMA.DESeqDataSet
knitr::opts_chunk$set(echo = TRUE)
load(url("https://github.com/linnylin92/469_public/raw/master/hw5/airway.RData"))
library(DESeq2)
load(url("https://github.com/linnylin92/469_public/raw/master/hw5/airway.RData"))
dds <- DESeq2::DESeq(dds)
?DESeq2::DESeq
?DESeq2::results
?DESeq2::DESeq
dds <- DESeq2::DESeq(dds)
res <- DESeq2::results(dds)
DESeq2::plotMA(res, ylim = c(-5, 5))
vsd <- DESeq2::vst(dds, blind = FALSE)
vsn::meanSdPlot(SummarizedExperiment::assay(dds)) #requires hexbin
library( hexbin)
library(DESeq2, hexbin, vsn)
?libraries
libraries("DESeq2", "hexbin", "vsn")
library("DESeq2", "hexbin", "vsn")
knitr::opts_chunk$set(echo = TRUE)
library("DESeq2", "hexbin", "vsn")
library("DESeq2", "hexbin", "vsn", "SummarizedExperiment", "genefilter", "pheatmap")
?library
library(DESeq2)
library(hexbin)
library(vsn)
library(SummarizedExperiment)
library(genefilter)
library(pheatmap)
vsd <- DESeq2::vst(dds, blind = FALSE)
library(DESeq2)
library(hexbin)
library(vsn)
library(SummarizedExperiment)
library(genefilter)
library(pheatmap)
load(url("https://github.com/linnylin92/469_public/raw/master/hw5/airway.RData"))
?DESeq2::DESeq
dds <- DESeq2::DESeq(dds)
?DESeq2::results
res <- DESeq2::results(dds)
DESeq2::plotMA(res, ylim = c(-5, 5), main = "MA plot")
vsd <- DESeq2::vst(dds, blind = FALSE)
par(mfrow = c(1,2))
vsd <- DESeq2::vst(dds, blind = FALSE)
count_dds <- SummarizedExperiment::assay(dds)
quantile(count_dds)
count_vsd <- SummarizedExperiment::assay(vsd)
quantile(count_vsd)
par(mfrow = c(1,2))
vsn::meanSdPlot(count_dds, main = "Not variance stabilized") #requires hexbin
vsn::meanSdPlot(count_vsd, main = "Variance stabilized")
topVarGenes <- head(order(genefilter::rowVars(count_vsd), decreasing = TRUE), 40)
dat <- count_vsd[topVarGenes,]
dat <- dat - rowMeans(dat)
anno <- as.data.frame(SummarizedExperiment::colData(vsd)[, c("cell","dex")])
pheatmap::pheatmap(dat, annotation_col = anno)
vsd <- DESeq2::vst(dds, blind = FALSE)
count_dds <- SummarizedExperiment::assay(dds)
quantile(count_dds)
count_vsd <- SummarizedExperiment::assay(vsd)
quantile(count_vsd)
p1 <- vsn::meanSdPlot(count_dds)
p2 <- vsn::meanSdPlot(count_vsd)
grid.arrange(plot1, plot2, ncol=2)
?vsn::meanSdPlot
?ggplot2::grid.arrange
?grid.arrange
p1 <- vsn::meanSdPlot(count_dds, plot = F)
p2 <- vsn::meanSdPlot(count_vsd, plot = F)
gridExtra::grid.arrange(plot1, plot2, ncol=2)
gridExtra::grid.arrange(p1, p2, ncol=2)
class(p1)
gridExtra::grid.arrange(p1$gg, p2$gg, ncol=2)
2880x1800
2800*480/1800
install.packages("DNAcopy")
devtools::install_github("veseshan/DNAcopy")
library(DNAcopy)
install.packages("sparcl")
setwd("~/Dropbox/Collaboration and People/Justin_Kevin_Max_Ryan/binseginf_cnvkit/markdowns")
rm(list=ls())
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
head(dat)
chrom2 <- dat[which(dat$chromosome == "chr2"),]
head(chrom2)
chrom2 <- dat[which(dat$chromosome == "chr2"),]
chrom2_acgh <- dat_acgh[which(dat_acgh$chromosome == "chr2"),]
dim(chrom2)
dim(chrom2_acgh)
plot(chrom2$log2, pch = 16)
res <- binseginf::bsfs(chrom2$log2, numSteps = 10)
res$tree
res$cp
res$y.fit
plot(chrom2$log2, pch = 16)
points(res$y.fit, col = "red", pch = 16)
# rolling average removing points
vec <- chrom2$log2
bin_width <- 50
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
plot(vec, pch = 16)
points(avg_vec, col = "red", pch = 16)
error_threshold <- quantile(abs(vec - avg_vec), probs = 0.95)
error_threshold
error_threshold <- 2*quantile(abs(vec - avg_vec), probs = 0.95)
error_threshold
error_threshold <- 2*as.numeric(quantile(abs(vec - avg_vec), probs = 0.95))
vec <- vec[which(abs(vec - avg_vec) <= error_threshold)]
plot(vec, pch = 16)
set.seed(10)
res <- binseginf::bsfs(vec, numSteps = 10)
plot(chrom2$log2, pch = 16)
points(vec, col = "red", pch = 16)
plot(vec, pch = 16)
points(res$y.fit, col = "red", pch = 16)
# let's try adding p-values
sigma = binseginf::get_sigma(y=vec, numSteps=10)
# let's try adding p-values
sigma = binseginf:::get_sigma(y=vec, numSteps=10)
# let's try adding p-values
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
sigma <- sd(vec - avg_vec)
sigma
## next make the contrasts
n <- length(vec)
vlist <- binseginf::make_contrasts(res$cp, res$cp.sign, n, check.long.enough=TRUE)
vlist <- binseginf:::make_contrasts(res$cp, res$cp.sign, n, check.long.enough=TRUE)
binseginf::make_all_segment_contrasts_from_cp
make_contrasts <- function(cp, cp.sign, n){
vlist = make_all_segment_contrasts_from_cp(cp=c(cp, precuts),
cp.sign=c(cp.sign,
rep(1, length(precuts))),
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=c(cp, precuts),
cp.sign=c(cp.sign,
rep(1, length(precuts))),
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
vlist <- make_contrasts(res$cp, res$cp.sign, n)
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
vlist <- make_contrasts(res$cp, res$cp.sign, n)
vlist
plot(vlist[[1]])
res_pval <- binseginf::addpv(out, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
library(assertthat)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
library(binseginf)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
library(parallel)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
res_pval$pvs
plot(res_pval$pvs)
plot(res_pval$pvs, pch = 16)
lines(c(-1e5,1e5), rep(0.05/10, 2), col = "red", lty = 2)
plot(vec, pch = 16)
points(res$y.fit, col = "red", pch = 16)
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type="rand", min.num.things=30, verbose=TRUE, numIS=500)
binseginf::addpv
binseginf:::addpv.bsfs
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type="rand", min.num.things=30, verbose=TRUE,  max.numIS=500)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type="addnoise", min.num.things=30, verbose=TRUE,  max.numIS=500)
stats::p.adjust(res_pval$pvs, method = "fdr")
which(stats::p.adjust(res_pval$pvs, method = "fdr") <= 0.05)
# let's try adding p-values
## first compute the sigma
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
sigma <- sd(vec - avg_vec)/2
## next make the contrasts
n <- length(vec)
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
vlist <- make_contrasts(res$cp, res$cp.sign, n)
library(parallel)
library(assertthat)
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
plot(res_pval$pvs, pch = 16)
res_pval$pvs
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
sigma <- sd(vec - avg_vec)
## next make the contrasts
n <- length(vec)
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
vlist <- make_contrasts(res$cp, res$cp.sign, n)
library(parallel)
library(assertthat)
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
plot(res_pval$pvs, pch = 16)
rm(list=ls())
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
chrom2 <- dat[which(dat$chromosome == "chr2"),]
chrom2_acgh <- dat_acgh[which(dat_acgh$chromosome == "chr2"),]
# rolling average removing points
vec <- chrom2$log2
bin_width <- 50
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
# error_threshold <- 2*as.numeric(quantile(abs(vec - avg_vec), probs = 0.95))
iqr <- abs(diff(quantile(vec - avg_vec, probs = c(0.25, 0.75))))
iqr
error_vec <- vec - avg_vec
iqr <- abs(diff(quantile(error_vec, probs = c(0.25, 0.75))))
idx <- c(which(error_vec < quantile(error_vec, probs = 0.25) - 1.5*iqr),
which(error_vec > quantile(error_vec, probs = 0.75) + 1.5*iqr))
idx
vec <- vec[-idx]
plot(vec, pch = 16)
set.seed(10)
res <- binseginf::bsfs(vec, numSteps = 10)
plot(vec, pch = 16)
points(res$y.fit, col = "red", pch = 16)
# let's try adding p-values
## first compute the sigma
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
sigma <- sd(vec - avg_vec)
sigma
## next make the contrasts
n <- length(vec)
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
vlist <- make_contrasts(res$cp, res$cp.sign, n)
library(parallel)
library(assertthat)
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
plot(res_pval$pvs, pch = 16)
which(stats::p.adjust(res_pval$pvs, method = "fdr") <= 0.05)
