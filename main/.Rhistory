knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
col_vec <- rep(NA, length(x_vec))
col_vec_acgh <- rep(NA, length(x_vec_acgh))
for(i in 1:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
idx2 <- which(dat_acgh$chromosome == uniq_chrom[i])
if(i%%2 == 1){
col_vec[idx] <- rgb(1,0,0,0.2)
col_vec_acgh[idx2] <- rgb(1,0,0,0.2)
} else {
col_vec[idx] <- rgb(0,0,1,0.2)
col_vec_acgh[idx2] <- rgb(0,0,1,0.2)
}
}
par(mfrow = c(2,1), mar = c(4,4,0.5,0.5))
plot(x = x_vec, y = dat$log2, pch = 16,
col = col_vec, ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
dim(dat)
length(which(dat$chromosome == "chr2"))
50/2178
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
dat$x_vec <- x_vec
dat$x_vec <- x_vec
dat_acgh$x_vec <- x_vec_acgh
head(dat)
plot(dat$x_vec)
sort(dat$chromosome)
sort(unique(dat$chromosome))
unique(dat$chromosome)
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
dat$x_vec <- x_vec
dat_acgh$x_vec <- x_vec_acgh
col_vec <- rep(NA, length(x_vec))
col_vec_acgh <- rep(NA, length(x_vec_acgh))
for(i in 1:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
idx2 <- which(dat_acgh$chromosome == uniq_chrom[i])
if(i%%2 == 1){
col_vec[idx] <- rgb(1,0,0,0.2)
col_vec_acgh[idx2] <- rgb(1,0,0,0.2)
} else {
col_vec[idx] <- rgb(0,0,1,0.2)
col_vec_acgh[idx2] <- rgb(0,0,1,0.2)
}
}
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
dat$x_vec <- x_vec
dat_acgh$x_vec <- x_vec_acgh
col_vec <- rep(NA, length(x_vec))
col_vec_acgh <- rep(NA, length(x_vec_acgh))
for(i in 1:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
idx2 <- which(dat_acgh$chromosome == uniq_chrom[i])
if(i%%2 == 1){
col_vec[idx] <- rgb(1,0,0,0.2)
col_vec_acgh[idx2] <- rgb(1,0,0,0.2)
} else {
col_vec[idx] <- rgb(0,0,1,0.2)
col_vec_acgh[idx2] <- rgb(0,0,1,0.2)
}
}
dat$col_vec <- col_vec
dat_acgh$col_vec <- col_vec_acgh
head(dat)
par(mfrow = c(2,1), mar = c(4,4,0.5,0.5))
plot(x = x_vec, y = dat$log2, pch = 16,
col = col_vec, ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
plot(x = x_vec_acgh, y = dat_acgh$log2, pch = 16,
col = col_vec_acgh, ylim = c(-4,2), xlab = "Order", ylab = "Microarray log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
retain_indices <- function(vec, bin_width = length(vec)/50){
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
error_vec <- vec - avg_vec
iqr <- abs(diff(stats::quantile(error_vec, probs = c(0.25, 0.75))))
idx <- intersect(which(error_vec > stats::quantile(error_vec, probs = 0.25) - 1.5*iqr),
which(error_vec < stats::quantile(error_vec, probs = 0.75) + 1.5*iqr))
idx
}
preprocess_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp_list <- lapply(chromosomes, function(chr){
tmp <- dat[which(dat$chromosome == chr),]
idx <- retain_indices(tmp$log2)
tmp[idx,]
})
do.call(rbind, tmp_list)
}
dat2 <- preprocess_data(dat)
plot(x = dat2$x_vec, y = dat2$log2, pch = 16,
col = dat2$col_vec, ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
active_chr <- c("chr5", "chr10", "chr14")
chromosomes <- unique(dat$chromosome)
chr = "chr1"
res <- binseginf::bsfs(dat[which(dat$chromosome == chr), "log2"], numSteps = 10)
res$y.fit
plot(res$y.fit)
1/.74 = x/1
1/.74
1.35*1.5
.74*2.5
62*1.3
1400/3
dat_short <- dat[which(!dat$chromosome %in% active_chr),]
dat_short <- dat[which(!dat$chromosome %in% active_chr),]
est_short <- segment_data(dat_short)
active_chr <- c("chr5", "chr10", "chr14")
segment_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp <- lapply(chromosomes, function(chr){
res <- binseginf::bsfs(dat[which(dat$chromosome == chr), "log2"], numSteps = 10)
res$y.fit
})
unlist(tmp)
}
dat_short <- dat[which(!dat$chromosome %in% active_chr),]
active_chr <- c("chr5", "chr10", "chr14")
segment_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp <- lapply(chromosomes, function(chr){
print(chr)
res <- binseginf::bsfs(dat[which(dat$chromosome == chr), "log2"], numSteps = 10)
res$y.fit
})
unlist(tmp)
}
dat_short <- dat[which(!dat$chromosome %in% active_chr),]
est_short <- segment_data(dat_short)
sigma <- sd(dat_short$log2 - est_short)
sigma
par(mfrow = c(2,1), mar = c(4,4,0.5,0.5))
idx <- which(dat2$chromosome == "chr10")
plot(x = dat2$x_vec[idx], y = dat2$log2[idx], pch = 16,
col = dat2$col_vec[idx], ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
plot(x = dat2$x_vec[idx], y = dat2$log2[idx], pch = 16,
col = dat2$col_vec[idx], ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
length(dx)
length(idx)
length(res$y.fit)
idx <- which(dat2$chromosome == "chr10")
length(idx)
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
nrow(tmp_vec)
length(tmp_vec)
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
res <- binseginf::bsfs(tmp_vec, numSteps = 5)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
plot(x = dat2$x_vec[idx], y = dat2$log2[idx], pch = 16,
col = dat2$col_vec[idx], ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
sig_p_idx <- which(res_pval$pvs <= 0.05)
for(i in sig_p_idx){
lines(rep(dat2$x_vec[abs(as.numeric(names(res_pval$pvs)[i]))], 2), c(-1e5,1e5), col = "red", lwd = 2, lty = 2)
}
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
res <- binseginf::bsfs(tmp_vec, numSteps = 5)
vlist <- make_contrasts(res$cp, res$cp.sign, length(tmp_vec))
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
res <- binseginf::bsfs(tmp_vec, numSteps = 5)
vlist <- make_contrasts(res$cp, res$cp.sign, length(tmp_vec))
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
# needed for the pvalue calculatiosn to come
library(parallel)
library(assertthat)
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
res <- binseginf::bsfs(tmp_vec, numSteps = 5)
vlist <- make_contrasts(res$cp, res$cp.sign, length(tmp_vec))
set.seed(10)
res_pval <- binseginf::addpv(res, sigma = sigma, vlist = vlist,
type = "plain", verbose = T)
idx <- which(dat2$chromosome == "chr10")
plot(x = dat2$x_vec[idx], y = dat2$log2[idx], pch = 16,
col = dat2$col_vec[idx], ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
sig_p_idx <- which(res_pval$pvs <= 0.05)
for(i in sig_p_idx){
lines(rep(dat2$x_vec[abs(as.numeric(names(res_pval$pvs)[i]))], 2), c(-1e5,1e5), col = "red", lwd = 2, lty = 2)
}
res_pval$pvs
sig_p_idx
i=1
rep(dat2$x_vec[abs(as.numeric(names(res_pval$pvs)[i]))], 2)
rep(dat2$x_vec[idx][abs(as.numeric(names(res_pval$pvs)[i]))], 2)
idx <- which(dat2$chromosome == "chr10")
plot(x = dat2$x_vec[idx], y = dat2$log2[idx], pch = 16,
col = dat2$col_vec[idx], ylim = c(-4,2), xlab = "Order", ylab = "Sequencing log2", cex = 0.5)
lines(x = c(-10^8, 10^8), y = rep(0,2), lwd = 2, lty = 1)
lines(x = c(-10^8, 10^8), y = rep(-0.4,2), lwd = 2, lty = 2)
lines(x = c(-10^8, 10^8), y = rep(0.3,2), lwd = 2, lty = 2)
points(x = dat2$x_vec[idx], y = res$y.fit, col = "red", pch = 16, cex = 0.5)
sig_p_idx <- which(res_pval$pvs <= 0.05)
for(i in sig_p_idx){
lines(rep(dat2$x_vec[idx][abs(as.numeric(names(res_pval$pvs)[i]))], 2), c(-1e5,1e5), col = "red", lwd = 2, lty = 2)
}
dim(dat2)
idx <- which(dat_acgh2$chromosome == "chr10")
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
dat$x_vec <- x_vec
dat_acgh$x_vec <- x_vec_acgh
col_vec <- rep(NA, length(x_vec))
col_vec_acgh <- rep(NA, length(x_vec_acgh))
for(i in 1:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
idx2 <- which(dat_acgh$chromosome == uniq_chrom[i])
if(i%%2 == 1){
col_vec[idx] <- rgb(1,0,0,0.2)
col_vec_acgh[idx2] <- rgb(1,0,0,0.2)
} else {
col_vec[idx] <- rgb(0,0,1,0.2)
col_vec_acgh[idx2] <- rgb(0,0,1,0.2)
}
}
dat$col_vec <- col_vec
dat_acgh$col_vec <- col_vec_acgh
retain_indices <- function(vec, bin_width = length(vec)/50){
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
error_vec <- vec - avg_vec
iqr <- abs(diff(stats::quantile(error_vec, probs = c(0.25, 0.75))))
idx <- intersect(which(error_vec > stats::quantile(error_vec, probs = 0.25) - 1.5*iqr),
which(error_vec < stats::quantile(error_vec, probs = 0.75) + 1.5*iqr))
idx
}
preprocess_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp_list <- lapply(chromosomes, function(chr){
tmp <- dat[which(dat$chromosome == chr),]
idx <- retain_indices(tmp$log2)
tmp[idx,]
})
do.call(rbind, tmp_list)
}
dat2 <- preprocess_data(dat)
dat_acgh2 <- preprocess_data(dat_acgh)
length(which(dat2$chromosome == "chr10"))
length(which(dat_acgh2$chromosome == "chr10"))
knitr::opts_chunk$set(echo = TRUE)
dat <- read.csv("../data/CL_flat.cnr", sep = "\t")
dat_acgh <- read.csv("../data/CL_acgh.cnr", sep = "\t")
ref_genome <- read.csv("../data/hg19.genome", sep = "\t")
dat[,c("start", "end")] <- dat[,c("start", "end")]/10^6
dat_acgh[,c("start", "end")] <- dat_acgh[,c("start", "end")]/10^6
ref_genome$size <- ref_genome$size/10^6
# add some padding
ref_padding <- 50
ref_genome$size <- ref_genome$size + ref_padding
x_vec <- dat$start
x_vec_acgh <- dat_acgh$start
uniq_chrom <- unique(dat$chromosome)
for(i in 2:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
x_vec[idx] <- x_vec[idx] + sum(ref_genome$size[1:(i-1)])
idx <- which(dat_acgh$chromosome == uniq_chrom[i])
x_vec_acgh[idx] <- x_vec_acgh[idx] + sum(ref_genome$size[1:(i-1)])
}
dat$x_vec <- x_vec
dat_acgh$x_vec <- x_vec_acgh
col_vec <- rep(NA, length(x_vec))
col_vec_acgh <- rep(NA, length(x_vec_acgh))
for(i in 1:length(uniq_chrom)){
idx <- which(dat$chromosome == uniq_chrom[i])
idx2 <- which(dat_acgh$chromosome == uniq_chrom[i])
if(i%%2 == 1){
col_vec[idx] <- rgb(1,0,0,0.2)
col_vec_acgh[idx2] <- rgb(1,0,0,0.2)
} else {
col_vec[idx] <- rgb(0,0,1,0.2)
col_vec_acgh[idx2] <- rgb(0,0,1,0.2)
}
}
dat$col_vec <- col_vec
dat_acgh$col_vec <- col_vec_acgh
retain_indices <- function(vec, bin_width = length(vec)/50){
avg_vec <- sapply(1:length(vec), function(i){
mean(vec[(max(1, i-bin_width)):(min(length(vec), i+bin_width))])
})
error_vec <- vec - avg_vec
iqr <- abs(diff(stats::quantile(error_vec, probs = c(0.25, 0.75))))
idx <- intersect(which(error_vec > stats::quantile(error_vec, probs = 0.25) - 1.5*iqr),
which(error_vec < stats::quantile(error_vec, probs = 0.75) + 1.5*iqr))
idx
}
preprocess_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp_list <- lapply(chromosomes, function(chr){
tmp <- dat[which(dat$chromosome == chr),]
idx <- retain_indices(tmp$log2)
tmp[idx,]
})
do.call(rbind, tmp_list)
}
dat2 <- preprocess_data(dat)
dat_acgh2 <- preprocess_data(dat_acgh)
a
active_chr <- c("chr5", "chr10", "chr14")
segment_data <- function(dat){
chromosomes <- unique(dat$chromosome)
tmp <- lapply(chromosomes, function(chr){
print(chr)
res <- binseginf::bsfs(dat[which(dat$chromosome == chr), "log2"], numSteps = 10)
res$y.fit
})
unlist(tmp)
}
dat_short <- dat2[which(!dat2$chromosome %in% active_chr),]
est_short <- segment_data(dat_short)
sigma <- sd(dat_short$log2 - est_short)
dat_acgh_short <- dat_acgh2[which(!dat_acgh2$chromosome %in% active_chr),]
est_acgh_short <- segment_data(dat_acgh_short)
# needed for the pvalue calculatiosn to come
library(parallel)
library(assertthat)
make_contrasts <- function(cp, cp.sign, n){
vlist = binseginf::make_all_segment_contrasts_from_cp(cp=cp,
cp.sign=cp.sign,
n=n)
vlist = vlist[which(abs(as.numeric(names(vlist)))%in%cp)]
return(vlist)
}
tmp_vec <- dat2[dat2$chromosome == "chr10", "log2"]
G = matrix(0, nrow = 10, ncol  = 5)
G[,1] = 1
max(svd(G)$d)
sqrt(10)
G
G = matrix(0, nrow = 10, ncol  = 5)
G[1:5,1] <- 1
G[6:10,] <- diag(5)
G
max(svd(G)$d)
zz = t(G)%*%G
zz
G = matrix(0,100,5)
set.seed(10)
for(i in 1:100){
G[i,sample(1:5,1)] <- 1
}
G
zz = t(G)%*%G
zz
eigen(zz)$values
